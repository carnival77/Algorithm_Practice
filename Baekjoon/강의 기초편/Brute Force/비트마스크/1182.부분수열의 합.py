# 개념
# 1. 부분수열을 모두 구한다. 부분수열의 개수를 구하는 방법은, n자리 정수 중에서, 각 자리의 정수가 들어가는가 (1), 아닌가 (0) 로 구분할 수 있다.
# 2. 부분수열의 개수는 2^n - 1(공집합 제외). 그 부분수열의 합을 구해야 하므로, 최대 개수가 N개인 부분 수열의 합을 구하는 O(n)은 2^n * N
# 3. 1<=n<=20 이므로, 2^n * n <= 약 2천만. 1초에 1억 연산이므로, 충분히 계산 가능 예상
# 4. 비트 마스크로 활용하려는 부분은 각 자리 정수 삽입 여부를 1,0으로 표현하는 부분이다.

# 풀이
# 1. 집합으로 만들어질 수 있는 모든 수열을 for문으로 모두 찾는다. 이때, 공집합은 제외하기 위해 1부터 for문을 시작한다. 2진수로 따지자면 1(2)를 제외하는 것.
# 2. 그 중 주어진 집합에 속한 요소를 가져 부분집합이 될 수 있는 집합들의 합을 구한다.
# 3. 그 합인 sum이 s와 맞다면 cnt를 증가시킨다.

import sys

input = sys.stdin.readline

n,s = map(int,input().split())

arr = list(map(int,input().split()))
ans=0

# 1. 집합으로 만들어질 수 있는 모든 수열을 for문으로 모두 찾는다. 이때, 공집합은 제외하기 위해 1부터 for문을 시작한다. 2진수로 따지자면 1(2)를 제외하는 것.
for i in range(1, (1<<n)):
    sum=0
    for k in range(n):
        # 2. 그 중 주어진 집합에 속한 요소를 가져 부분집합이 될 수 있는 집합들의 합을 구한다.
        if i & (1 << k) > 0:
            sum+=arr[k]
    # 3. 그 합인 sum이 s와 맞다면 cnt를 증가시킨다.
    if s == sum:
        ans+=1
print(ans)